generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Campaign {
  id           String     @id @default(uuid()) @db.Uuid
  name         String
  creatorId    String     @db.Uuid
  restaurantId String     @db.Uuid
  status       String
  template     Int
  subject      String
  body         String
  url          String
  fromName     String     @default("Jone's burgers")
  fromEmail    String     @default("jonesburgers@gmail.com")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  mail         Mail[]
}

model Mail {
  id         String   @id @default(uuid()) @db.Uuid
  clientId   String   @db.Uuid
  campaignId String   @db.Uuid
  rate       Int?
  opened     Boolean  @default(false)
  unsub      Boolean  @default(false)
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Client {
  id           String     @id @default(uuid()) @db.Uuid
  email        String     @unique
  name         String
  firstname    String?
  phone        String?
  image        String?
  address      String?
  city         String?
  unsubscribed Boolean?   @default(false)
  zip          String?
  restaurantId String     @db.Uuid
  lastLogin    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  Mail         Mail[]
}

model Category {
  id    String  @id @default(uuid()) @db.Uuid
  name  String  @unique
  color String? @default("#000000")
  icon  String? @default("üçî")

  restaurants Restaurant[]
}

model Invitation {
  id String @id @default(uuid()) @db.Uuid

  senderId String @db.Uuid
  sender   User   @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String @db.Uuid
  receiver   User   @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleUserOnOrganization {
  ADMIN
  USER
}

model UsersOnOrganizations {
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  role RoleUserOnOrganization

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, organizationId])
}

model Organization {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?

  users       UsersOnOrganizations[]
  restaurants Restaurant[]
  invitations Invitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id        String  @id @default(uuid()) @db.Uuid
  name      String
  address   String?
  latitude  Float?
  longitude Float?
  logo      String?

  organizationId String     @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  categoryId     String?      @db.Uuid
  category       Category?    @relation(fields: [categoryId], references: [id])
  campaigns      Campaign[]
  platforms      Platform[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client[]
}

model Prospect {
  id        String  @id @default(uuid()) @db.Uuid
  name      String
  address   String?
  latitude  Float?
  longitude Float?

  createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                 @id @default(uuid()) @db.Uuid
  name                String?
  email               String?                @unique
  emailVerified       DateTime?
  image               String?
  lastLogin           DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  accounts            Account[]
  sessions            Session[]
  Campaign            Campaign[]
  organizations       UsersOnOrganizations[]
  senderInvitations   Invitation[]           @relation("sender")
  receiverInvitations Invitation[]           @relation("receiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StoryStatus {
  PUBLISHED
  DRAFT
  SCHEDULED
  ERROR
  NOW
}

model Story {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  publishedAt DateTime?
  posts       Post[]
  platformId  String      @db.Uuid
  platform    Platform    @relation(fields: [platformId], references: [id], onDelete: Cascade)
  status      StoryStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum PostType {
  IMAGE
  VIDEO
}

model Post {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @unique @db.Uuid
  originalUrl  String
  convertedUrl String?
  story        Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId      String?  @db.Uuid
  position     Int?
  type         PostType
  socialPostId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum PlatformKey {
  TWITTER
  INSTAGRAM
  FACEBOOK
  TIKTOK
}

model Platform {
  id       String      @id @default(uuid()) @db.Uuid
  key      PlatformKey
  login    String
  password String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.Uuid
  stories      Story[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
