// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Campaign {
    id        String   @id @default(cuid())
    name      String
    creatorId String
    type      String
    status    String
    template  Int
    subject   String
    body      String
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    Mail      Mail[]
}

model Mail {
    id         String   @id @default(cuid())
    clientId   String
    campaignId String
    rate       Int?
    opened     Boolean  @default(false)
    unsub      Boolean  @default(false)
    status     String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
    campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Client {
    id        String    @id @default(cuid())
    name      String
    firstname String?
    email     String?   @unique
    phone     String?
    image     String?
    status    String
    lastLogin DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Mail      Mail[]
}

model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    color       String?  @default("#000000")
    icon        String?  @default("üçî")
}

model Organization {
    id          String   @id @default(cuid())
    name        String
    description String?

    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    restaurants Restaurant[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Restaurant {
    id          String   @id @default(cuid())
    name        String
    category    String?
    address     String?
    latitude    Float?
    longitude   Float?

    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id])

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    lastLogin     DateTime?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    accounts      Account[]
    sessions      Session[]
    Campaign      Campaign[]
    Organization  Organization[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
